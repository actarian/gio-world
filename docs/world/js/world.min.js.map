{"version":3,"sources":["docs/world/js/world.js"],"names":["cities","renderer","THREE","WebGLRenderer","alpha","antialias","shadowMap","enabled","setSize","window","innerWidth","innerHeight","canvas","document","querySelector","appendChild","domElement","scene","Scene","fog","FogExp2","camera","PerspectiveCamera","position","set","up","Vector3","lookAt","directional1","ambient","AmbientLight","add","DirectionalLight","castShadow","shadowCameraVisible","shadowMapWidth","shadowMapHeight","directional2","parent","geometry","material","mesh","clock","particleRef","world","SphereGeometry","MeshStandardMaterial","color","transparent","opacity","roughness","metalness","map","ImageUtils","loadTexture","Mesh","receiveShadow","rotation","y","Math","PI","particles","texture","CanvasTexture","createElement","width","height","ctx","getContext","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","createSprite","Geometry","PointsMaterial","size","vertexColors","VertexColors","blending","AdditiveBlending","depthTest","Points","x","calcPosFromLatLonRad","forEach","point","i","vertex","z","vertices","push","colors","Color","mergeVertices","verticesNeedUpdate","addParticles","onWindowResize","aspect","offsetWidth","offsetHeight","updateProjectionMatrix","lat","lon","radius","phi","theta","sin","cos","Clock","loop","time","getDelta","local","localToWorld","clone","distance","distanceTo","s","max","min","colorsNeedUpdate","render","requestAnimationFrame","addEventListener"],"mappings":"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","file":"world.min.js","sourcesContent":["/* global window, document, console, THREE, TweenLite, TweenMax, Elastic */\n\n(function() {\n\t'use strict';\n\n\tvar cities = [\n\t\t[43.9096538, 12.8399805],\n\t\t[41.8519772, 12.2347364],\n\t\t[51.5287718, -0.2416791],\n\t\t[40.6976637, -74.1197623]\n\t];\n\n\tvar renderer = new THREE.WebGLRenderer({\n\t\talpha: true,\n\t\tantialias: true\n\t});\n\trenderer.shadowMap.enabled = true;\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n\tvar canvas = document.querySelector('#canvas');\n\tcanvas.appendChild(renderer.domElement);\n\tvar scene = new THREE.Scene();\n\tscene.fog = new THREE.FogExp2(0x000000, 0.1); // new THREE.Fog(0x000000, 0, 10);\n\n\tvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 100);\n\tcamera.position.set(0, 1.0, 2.0);\n\tcamera.up = new THREE.Vector3(0, 0, -1);\n\tcamera.lookAt(new THREE.Vector3(0, 0, 0));\n\n\tvar ambient = new THREE.AmbientLight(0x222222);\n\tscene.add(ambient);\n\n\tvar directional1;\n\tdirectional1 = new THREE.DirectionalLight(0xe0e0e0, 0.8);\n\tdirectional1.position.set(0, 2, 0.5);\n\tdirectional1.castShadow = true;\n\tdirectional1.shadowCameraVisible = true;\n\tdirectional1.shadowMapWidth = directional1.shadowMapHeight = 2048;\n\tscene.add(directional1);\n\n\tvar directional2 = new THREE.DirectionalLight(0xe0e0e0, 0.4);\n\tdirectional2.position.set(0, -2, 0);\n\tscene.add(directional2);\n\n\tvar particleRef = new THREE.Vector3(0.0, 0.0, 1.0);\n\t// var shadow = addShadow(scene);\n\tvar world = addWorld(scene);\n\tvar particles = addParticles(world);\n\n\tplay();\n\tonWindowResize();\n\n\twindow.addEventListener('resize', onWindowResize, false);\n\n\tfunction createSprite() {\n\t\tvar canvas = document.createElement('canvas');\n\t\tcanvas.width = 128;\n\t\tcanvas.height = 128;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tvar gradient = ctx.createRadialGradient(\n\t\t\tcanvas.width / 2,\n\t\t\tcanvas.height / 2,\n\t\t\t0,\n\t\t\tcanvas.width / 2,\n\t\t\tcanvas.height / 2,\n\t\t\tcanvas.width / 2\n\t\t);\n\t\tgradient.addColorStop(0, 'rgba(255,255,255,1)');\n\t\tgradient.addColorStop(0.2, 'rgba(255,255,255,1)');\n\t\tgradient.addColorStop(0.22, 'rgba(255,255,255,.2)');\n\t\tgradient.addColorStop(1, 'rgba(255,255,255,0)');\n\t\tctx.fillStyle = gradient;\n\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\treturn canvas;\n\t}\n\n\tfunction addShadow(parent) {\n\t\tvar geometry = new THREE.PlaneGeometry(100, 100);\n\t\tgeometry.rotateX(-Math.PI / 4);\n\t\tvar material = new THREE.ShadowMaterial();\n\t\tmaterial.opacity = 0.2;\n\t\tvar mesh = new THREE.Mesh(geometry, material);\n\t\tmesh.position.z = -0.6;\n\t\tmesh.receiveShadow = true;\n\t\tparent.add(mesh);\n\t\treturn mesh;\n\t}\n\n\tfunction addWorld(parent) {\n\t\tvar geometry = new THREE.SphereGeometry(0.5, 64, 64);\n\t\tvar material = new THREE.MeshStandardMaterial({\n\t\t\tcolor: '#fff',\n\t\t\ttransparent: true,\n\t\t\topacity: 0.85,\n\t\t\troughness: 0.65,\n\t\t\tmetalness: 0.6,\n\t\t\tmap: THREE.ImageUtils.loadTexture('world/img/world-texture.gif'),\n\t\t});\n\t\tvar mesh = new THREE.Mesh(geometry, material);\n\t\tmesh.castShadow = true;\n\t\tmesh.receiveShadow = false;\n\t\tmesh.rotation.y = Math.PI * 1.2;\n\t\tparent.add(mesh);\n\t\treturn mesh;\n\t}\n\n\tfunction addCities(parent) {\n\t\tvar meshes = new Array(10).fill(0).map(function(x, i) {\n\t\t\tvar geometry = new THREE.SphereGeometry(0.005, 20, 20);\n\t\t\tvar material = new THREE.MeshStandardMaterial({\n\t\t\t\tcolor: new THREE.Color('red')\n\t\t\t});\n\t\t\tvar mesh = new THREE.Mesh(geometry, material);\n\t\t\treturn mesh;\n\t\t}).forEach(function(mesh, i) {\n\t\t\tvar latlon = cities[Math.floor(Math.random() * cities.length)];\n\t\t\tvar point = calcPosFromLatLonRad(latlon[0], latlon[1], 0.5);\n\t\t\tmesh.position.set(point.x, point.y, point.z);\n\t\t\tparent.add(mesh);\n\t\t});\n\t\treturn meshes;\n\t}\n\n\tfunction addParticles(parent) {\n\t\tvar texture = new THREE.CanvasTexture(createSprite());\n\t\tvar geometry = new THREE.Geometry();\n\t\tvar material = new THREE.PointsMaterial({\n\t\t\tsize: 0.07,\n\t\t\tmap: texture,\n\t\t\tvertexColors: THREE.VertexColors,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\ttransparent: true\n\t\t});\n\t\tvar particles = new THREE.Points(geometry, material);\n\t\tvar points = cities.map(function(x) {\n\t\t\treturn calcPosFromLatLonRad(x[0], x[1], 0.5);\n\t\t}).forEach(function(point, i) {\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvertex.x = point.x;\n\t\t\tvertex.y = point.y;\n\t\t\tvertex.z = point.z;\n\t\t\tgeometry.vertices.push(vertex);\n\t\t\tgeometry.colors.push(new THREE.Color(0, 0, 0));\n\t\t});\n\t\tgeometry.mergeVertices();\n\t\tgeometry.verticesNeedUpdate = true;\n\t\tparticles.geometry = geometry;\n\t\tparent.add(particles);\n\t\treturn particles;\n\t}\n\n\tfunction onWindowResize() {\n\t\tvar size = {\n\t\t\twidth: 0,\n\t\t\theight: 0,\n\t\t\taspect: 0,\n\t\t};\n\t\tsize.width = canvas.offsetWidth;\n\t\tsize.height = canvas.offsetHeight;\n\t\tsize.aspect = size.width / size.height;\n\t\tif (renderer) {\n\t\t\trenderer.setSize(size.width, size.height);\n\t\t}\n\t\tif (camera) {\n\t\t\tcamera.aspect = size.aspect;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t}\n\t}\n\n\tfunction render(delta) {\n\t\tworld.rotation.y += 0.002;\n\t\tparticles.geometry.vertices.forEach(function(vertex, i) {\n\t\t\tvar local = world.localToWorld(vertex.clone());\n\t\t\tvar distance = local.distanceTo(particleRef);\n\t\t\tvar s = Math.max(0, Math.min(1, (1 - distance))) * 5;\n\t\t\tparticles.geometry.colors[i] = new THREE.Color(s, s, s);\n\t\t\tparticles.geometry.colorsNeedUpdate = true;\n\t\t});\n\t\trenderer.render(scene, camera);\n\t}\n\n\tfunction calcPosFromLatLonRad(lat, lon, radius) {\n\t\tvar phi = (90 - lat) * (Math.PI / 180);\n\t\tvar theta = (lon + 180) * (Math.PI / 180);\n\t\tvar x = -((radius) * Math.sin(phi) * Math.cos(theta));\n\t\tvar z = ((radius) * Math.sin(phi) * Math.sin(theta));\n\t\tvar y = ((radius) * Math.cos(phi));\n\t\treturn new THREE.Vector3(x, y, z);\n\t}\n\n\tfunction play() {\n\t\tvar clock = new THREE.Clock();\n\n\t\tfunction loop(time) {\n\t\t\tvar delta = clock.getDelta();\n\t\t\trender(delta);\n\t\t\twindow.requestAnimationFrame(loop);\n\t\t}\n\t\tloop();\n\t}\n\n}());\n"]}